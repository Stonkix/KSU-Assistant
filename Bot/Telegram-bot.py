import telebot
import sqlite3
import os
import threading
import time
from telebot import types
from datetime import datetime, timedelta, date
from Utils.Utils import verifyPassword

dbDir = "C:/Users/alexa/Desktop/KSU-Assistant-after-venv/Utils"
DATABASE_PATH = os.path.join(dbDir, "university.db")
botToken = '7637461107:AAFH6C5oy9WZIuQhZfkmH6YUbVNseduRA90'
bot = telebot.TeleBot(botToken)
user_states = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notification_thread = None
stop_notifications = False

def adapt_date_iso(val):
    return val.isoformat()

sqlite3.register_adapter(date, adapt_date_iso)

def getDBConnection():
    conn = sqlite3.connect(DATABASE_PATH)
    conn.row_factory = sqlite3.Row
    return conn

WEEKDAYS = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
WEEKDAYS_RU = {
    1: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
    2: '–í—Ç–æ—Ä–Ω–∏–∫',
    3: '–°—Ä–µ–¥–∞',
    4: '–ß–µ—Ç–≤–µ—Ä–≥',
    5: '–ü—è—Ç–Ω–∏—Ü–∞',
    6: '–°—É–±–±–æ—Ç–∞',
    7: '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
}
notified_lessons = set()
def check_schedule_changes():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    conn = getDBConnection()
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–∫–µ—à–∏—Ä—É–µ–º)
    cursor.execute("""
        SELECT l.id, l.group_id, l.teacher_id, l.weekday, l.pair_number, 
               s.name as subject_name, r.room_number, r.building,
               pt.start_time, pt.end_time
        FROM lessons l
        JOIN subjects s ON l.subject_id = s.id
        JOIN rooms r ON l.room_id = r.id
        JOIN pair_times pt ON l.pair_number = pt.pair_number
    """)
    current_schedule = {row['id']: dict(row) for row in cursor.fetchall()}

    try:
        while not stop_notifications:
            time.sleep(2)

            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            cursor.execute("""
                SELECT l.id, l.group_id, l.teacher_id, l.weekday, l.pair_number, 
                       s.name as subject_name, r.room_number, r.building,
                       pt.start_time, pt.end_time
                FROM lessons l
                JOIN pair_times pt ON l.pair_number = pt.pair_number
                JOIN subjects s ON l.subject_id = s.id
                JOIN rooms r ON l.room_id = r.id
                WHERE date('now') BETWEEN date(l.start_date) AND date(l.end_date)
            """)
            new_schedule = {row['id']: dict(row) for row in cursor.fetchall()}

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            changed_lessons = []

            # 1. –£–¥–∞–ª–µ–Ω–Ω—ã–µ
            for lesson_id in set(current_schedule.keys()) - set(new_schedule.keys()):
                changed_lessons.append(('deleted', current_schedule[lesson_id]))

            # 2. –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ
            for lesson_id in set(new_schedule.keys()) - set(current_schedule.keys()):
                changed_lessons.append(('added', new_schedule[lesson_id]))

            # 3. –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ
            for lesson_id in set(current_schedule.keys()) & set(new_schedule.keys()):
                old_lesson = current_schedule[lesson_id]
                new_lesson = new_schedule[lesson_id]

                changes = []
                if old_lesson['subject_name'] != new_lesson['subject_name']:
                    changes.append(('subject', old_lesson['subject_name'], new_lesson['subject_name']))
                if old_lesson['room_number'] != new_lesson['room_number'] or old_lesson['building'] != new_lesson['building']:
                    changes.append(('room', f"{old_lesson['room_number']} ({old_lesson['building']})", f"{new_lesson['room_number']} ({new_lesson['building']})"))
                if old_lesson['weekday'] != new_lesson['weekday']:
                    changes.append(('weekday', old_lesson['weekday'], new_lesson['weekday']))
                if old_lesson['pair_number'] != new_lesson['pair_number']:
                    changes.append(('time', f"{old_lesson['start_time']}-{old_lesson['end_time']}", f"{new_lesson['start_time']}-{new_lesson['end_time']}"))

                if changes:
                    changed_lessons.append(('modified', {
                        'id': lesson_id,
                        'changes': changes,
                        'group_id': new_lesson['group_id'],
                        'teacher_id': new_lesson['teacher_id'],
                        'weekday': new_lesson['weekday'],
                        'pair_number': new_lesson['pair_number']
                    }))

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            for change_type, lesson_data in changed_lessons:
                message = ""

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞
                if lesson_data['id'] in notified_lessons:
                    continue  # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã academic_groups
                cursor.execute("SELECT name FROM academic_groups WHERE id = ?", (lesson_data['group_id'],))
                group_name_row = cursor.fetchone()
                group_name = group_name_row['name'] if group_name_row else f"–ì—Ä—É–ø–ø–∞ {lesson_data['group_id']}"

                if change_type == 'modified':
                    change_descriptions = []
                    for field, old_val, new_val in lesson_data['changes']:
                        if field == 'subject':
                            change_descriptions.append(f"üìö –ü—Ä–µ–¥–º–µ—Ç: \"{old_val}\" ‚Üí \"{new_val}\"")
                        elif field == 'room':
                            change_descriptions.append(f"üè´ –ê—É–¥–∏—Ç–æ—Ä–∏—è: \"{old_val}\" ‚Üí \"{new_val}\"")
                        elif field == 'weekday':
                            old_weekday_name = WEEKDAYS_RU.get(int(old_val) - 1, old_val)
                            new_weekday_name = WEEKDAYS_RU.get(int(new_val) - 1, new_val)
                            change_descriptions.append(f"üìÖ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: \"{old_weekday_name}\" ‚Üí \"{new_weekday_name}\"")
                        elif field == 'time':
                            change_descriptions.append(f"‚è∞ –í—Ä–µ–º—è: \"{old_val}\" ‚Üí \"{new_val}\"")

                    if change_descriptions:
                        message = (
                            f"‚úè –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–∞—Ä–µ:\n"
                            f"üìç –ü–∞—Ä–∞ #{lesson_data['pair_number']} –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}:\n"
                            + "\n".join(change_descriptions)
                        )

                if message:
                    try:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º
                        cursor.execute(
                            "SELECT u.telegram_id FROM users u JOIN students s ON u.id = s.user_id WHERE s.group_id = ? AND (u.silent_mode IS NULL OR u.silent_mode != 1)",
                            (lesson_data['group_id'],))
                        for row in cursor.fetchall():
                            try:
                                bot.send_message(row['telegram_id'], message)
                            except Exception as e:
                                print(f"Failed to send notification to {row['telegram_id']}: {e}")

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é
                        cursor.execute(
                            "SELECT u.telegram_id FROM users u WHERE u.id = ? AND (u.silent_mode IS NULL OR u.silent_mode != 1)",
                            (lesson_data['teacher_id'],))
                        for row in cursor.fetchall():
                            try:
                                bot.send_message(row['telegram_id'], message)
                            except Exception as e:
                                print(f"Failed to send notification to {row['telegram_id']}: {e}")

                        # –î–æ–±–∞–≤–ª—è–µ–º ID —É—Ä–æ–∫–∞ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ, —á—Ç–æ–±—ã –±–æ–ª—å—à–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞
                        notified_lessons.add(lesson_data['id'])

                    except Exception as e:
                        print(f"Error sending notification: {e}")
    except Exception as e:
        print(f"Error in checking schedule changes: {e}")
    finally:
        conn.close()


def start_notifications():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç–æ–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –ø–∞—Ä
    """
    global notification_threads, stop_notifications
    stop_notifications = False

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
    notification_threads = []

    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    schedule_thread = threading.Thread(target=check_schedule_changes)
    schedule_thread.start()
    notification_threads.append(schedule_thread)

    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –ø–∞—Ä
    # upcoming_thread = threading.Thread(target=check_upcoming_lessons)
   # upcoming_thread.start()
    #notification_threads.append(upcoming_thread)


def stop_notifications():
    """
    –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –ø–æ—Ç–æ–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    global stop_notifications
    stop_notifications = True

    # –î–æ–∂–∏–¥–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
    if 'notification_threads' in globals():
        for thread in notification_threads:
            if thread.is_alive():
                thread.join()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def send_main_menu(chat_id):
    conn = getDBConnection()
    cursor = conn.cursor()
    cursor.execute("SELECT silent_mode FROM users WHERE telegram_id = ?", (chat_id,))
    user = cursor.fetchone()
    conn.close()

    silent_mode = user['silent_mode'] if user else 0
    silent_text = "üîï –í–∫–ª—é—á–∏—Ç—å" if not silent_mode else "üîî –í—ã–∫–ª—é—á–∏—Ç—å"

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    schedule_btn = types.KeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    events_btn = types.KeyboardButton("üìã –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
    week_btn = types.KeyboardButton("üìÖ –ß–∏—Å–ª–∏—Ç–µ–ª—å/–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å?")
    silent_btn = types.KeyboardButton(silent_text)
    markup.add(schedule_btn, events_btn, silent_btn, week_btn)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


# /start
@bot.message_handler(commands=['start'])
def handleStart(message):
    chat_id = message.chat.id
    user_states.pop(chat_id, None)

    conn = getDBConnection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE telegram_id = ?', (chat_id,))
    user = cursor.fetchone()
    conn.close()

    if user:
        send_main_menu(chat_id)
        bot.send_message(chat_id, "–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
    else:
        markup = types.InlineKeyboardMarkup()
        login_button = types.InlineKeyboardButton(text="üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", callback_data="start_login")
        markup.add(login_button)
        bot.send_message(
            chat_id,
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ KSU.\n\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Å—è.",
            reply_markup=markup
        )


@bot.callback_query_handler(func=lambda call: call.data == "start_login")
def start_login_callback(call):
    chat_id = call.message.chat.id
    bot.answer_callback_query(call.id)
    bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–æ—á—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, @studklg.ru –∏–ª–∏ @tksu.ru):')
    user_states[chat_id] = {'state': 'WAIT_EMAIL'}


@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get('state') == 'WAIT_EMAIL')
def handle_email(message):
    chat_id = message.chat.id
    email = message.text.strip()

    if not (email.endswith('@studklg.ru') or email.endswith('@tksu.ru')):
        bot.send_message(chat_id, '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –¥–æ–º–µ–Ω –ø–æ—á—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @studklg.ru –∏–ª–∏ @tksu.ru.')
        return

    conn = getDBConnection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE email = ?', (email,))
    user = cursor.fetchone()
    conn.close()

    if not user:
        bot.send_message(chat_id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–æ–π –ø–æ—á—Ç–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        return

    if user['telegram_id'] is not None:
        if str(user['telegram_id']) == str(chat_id):
            bot.send_message(chat_id, '–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.')
        else:
            bot.send_message(chat_id, '–≠—Ç–æ—Ç email —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.')
        user_states.pop(chat_id, None)
        return

    user_states[chat_id] = {'state': 'WAIT_PASSWORD', 'email': email}
    bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:')


@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get('state') == 'WAIT_PASSWORD')
def handle_password(message):
    chat_id = message.chat.id
    password = message.text.strip()
    email = user_states[chat_id]['email']

    conn = getDBConnection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE email = ?', (email,))
    user = cursor.fetchone()

    if not user or not verifyPassword(user['password_hash'], password):
        bot.send_message(chat_id, '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ /start')
        conn.close()
        user_states.pop(chat_id, None)
        return

    cursor.execute('UPDATE users SET telegram_id = ? WHERE email = ?', (chat_id, email))
    conn.commit()
    conn.close()

    bot.send_message(chat_id, f'‚úÖ –£—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ {user["role"]}.')
    user_states.pop(chat_id, None)
    send_main_menu(chat_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@bot.message_handler(func=lambda m: m.text in ["üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "üìÜ –°–µ–≥–æ–¥–Ω—è", "üóìÔ∏è –ù–∞ –Ω–µ–¥–µ–ª—é", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"])
def handle_schedule(message):
    chat_id = message.chat.id

    if message.text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        today_btn = types.KeyboardButton("üìÜ –°–µ–≥–æ–¥–Ω—è")
        week_btn = types.KeyboardButton("üóìÔ∏è –ù–∞ –Ω–µ–¥–µ–ª—é")
        back_btn = types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
        markup.add(today_btn, week_btn, back_btn)
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=markup)
        return

    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        send_main_menu(chat_id)
        return

    mode = 'today' if message.text == "üìÜ –°–µ–≥–æ–¥–Ω—è" else 'week'

    conn = getDBConnection()
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT id, role FROM users WHERE telegram_id = ?", (chat_id,))
        user = cursor.fetchone()

        if not user:
            bot.send_message(chat_id, "‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
            return

        user_id = user["id"]
        user_role = user["role"]

        if user_role == 'student':
            schedule_text = fetch_student_schedule(user_id, mode)
        elif user_role == 'teacher':
            schedule_text = fetch_teacher_schedule(user_id, mode)
        else:
            schedule_text = "‚ùå –í–∞—à–∞ —Ä–æ–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."

        bot.send_message(chat_id, schedule_text, parse_mode="HTML")

    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}")
    finally:
        conn.close()


def fetch_student_schedule(user_id, mode='today'):
    conn = getDBConnection()
    cursor = conn.cursor()

    cursor.execute("SELECT group_id FROM students WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    if not row:
        conn.close()
        return "‚ùå –í—ã –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É."

    group_id = row["group_id"]
    today = datetime.today()
    # FIXED: –î–æ–±–∞–≤–ª—è–µ–º +1 –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ñ–æ—Ä–º–∞—Ç—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (1-7)
    weekday = today.weekday() + 1
    today_str = today.strftime('%Y-%m-%d')

    if mode == 'today':
        cursor.execute(""" 
            SELECT lessons.weekday, lessons.pair_number, pair_times.start_time, pair_times.end_time,
                   subjects.name AS subject_name, rooms.room_number, rooms.building,
                   teachers.full_name AS teacher_name
            FROM lessons
            JOIN pair_times ON lessons.pair_number = pair_times.pair_number
            JOIN subjects ON lessons.subject_id = subjects.id
            JOIN rooms ON lessons.room_id = rooms.id
            JOIN teachers ON lessons.teacher_id = teachers.user_id
            WHERE lessons.group_id = ? AND lessons.weekday = ?
              AND date(?) BETWEEN date(lessons.start_date) AND date(lessons.end_date)
            ORDER BY lessons.pair_number
        """, (group_id, weekday, today_str))
    else:
        week_dates = [(today + timedelta(days=i)).strftime('%Y-%m-%d') for i in range(7)]
        weekday_range = tuple(i for i in range(7))
        cursor.execute(f"""
            SELECT lessons.weekday, lessons.pair_number, pair_times.start_time, pair_times.end_time,
                   subjects.name AS subject_name, rooms.room_number, rooms.building,
                   teachers.full_name AS teacher_name
            FROM lessons
            JOIN pair_times ON lessons.pair_number = pair_times.pair_number
            JOIN subjects ON lessons.subject_id = subjects.id
            JOIN rooms ON lessons.room_id = rooms.id
            JOIN teachers ON lessons.teacher_id = teachers.user_id
            WHERE lessons.group_id = ?
              AND lessons.weekday IN ({','.join(['?'] * len(weekday_range))})
              AND date(?) BETWEEN date(lessons.start_date) AND date(lessons.end_date)
            ORDER BY lessons.weekday, lessons.pair_number
        """, (group_id, *weekday_range, today_str))

    lessons = cursor.fetchall()
    conn.close()

    if not lessons:
        return "üìù –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    msg = ""
    last_day = -1
    for lesson in lessons:
        day = lesson['weekday']
        if mode == 'week' and day != last_day:
            msg += f"\nüìÖ <b>{WEEKDAYS[day - 1]}</b>\n"  # -1 –ø–æ—Ç–æ–º—É —á—Ç–æ –≤ –±–∞–∑–µ 1-7
            last_day = day
        msg += f"‚è∞ {lesson['start_time']}‚Äì{lesson['end_time']}: <b>{lesson['subject_name']}</b>\n"
        msg += f"   üë®‚Äçüè´ {lesson['teacher_name']}\n"
        msg += f"   üìç –ê—É–¥. {lesson['room_number']} ({lesson['building']})\n"
    return msg


def fetch_teacher_schedule(user_id, mode='today'):
    conn = getDBConnection()
    cursor = conn.cursor()

    today = datetime.today()
    weekday = today.weekday() + 1
    today_str = today.strftime('%Y-%m-%d')

    if mode == 'today':
        cursor.execute(""" 
            SELECT lessons.weekday, lessons.pair_number, pair_times.start_time, pair_times.end_time,
                   subjects.name AS subject_name, rooms.room_number, rooms.building,
                   academic_groups.name AS group_name
            FROM lessons
            JOIN pair_times ON lessons.pair_number = pair_times.pair_number
            JOIN subjects ON lessons.subject_id = subjects.id
            JOIN rooms ON lessons.room_id = rooms.id
            JOIN academic_groups ON lessons.group_id = academic_groups.id
            WHERE lessons.teacher_id = ? AND lessons.weekday = ?
              AND date(?) BETWEEN date(lessons.start_date) AND date(lessons.end_date)
            ORDER BY lessons.pair_number
        """, (user_id, weekday, today_str))
    else:
        week_dates = [(today + timedelta(days=i)).strftime('%Y-%m-%d') for i in range(7)]
        weekday_range = tuple(i for i in range(7))
        cursor.execute(f"""
            SELECT lessons.weekday, lessons.pair_number, pair_times.start_time, pair_times.end_time,
                   subjects.name AS subject_name, rooms.room_number, rooms.building,
                   academic_groups.name AS group_name
            FROM lessons
            JOIN pair_times ON lessons.pair_number = pair_times.pair_number
            JOIN subjects ON lessons.subject_id = subjects.id
            JOIN rooms ON lessons.room_id = rooms.id
            JOIN academic_groups ON lessons.group_id = academic_groups.id
            WHERE lessons.teacher_id = ?
              AND lessons.weekday IN ({','.join(['?'] * len(weekday_range))})
              AND date(?) BETWEEN date(lessons.start_date) AND date(lessons.end_date)
            ORDER BY lessons.weekday, lessons.pair_number
        """, (user_id, *weekday_range, today_str))

    lessons = cursor.fetchall()
    conn.close()

    if not lessons:
        return "üìù –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    msg = ""
    last_day = -1
    for lesson in lessons:
        day = lesson['weekday']
        if mode == 'week' and day != last_day:
            msg += f"\nüìÖ <b>{WEEKDAYS[day - 1]}</b>\n"  # -1 –ø–æ—Ç–æ–º—É —á—Ç–æ –≤ –±–∞–∑–µ 1-7
            last_day = day
        msg += f"‚è∞ {lesson['start_time']}‚Äì{lesson['end_time']}: <b>{lesson['subject_name']}</b>\n"
        msg += f"   üë• –ì—Ä—É–ø–ø–∞: {lesson['group_name']}\n"
        msg += f"   üìç –ê—É–¥. {lesson['room_number']} ({lesson['building']})\n"
    return msg


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìã –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
@bot.message_handler(func=lambda m: m.text == "üìã –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
def handle_events(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    new_events_btn = types.KeyboardButton("‚ùì –£–∑–Ω–∞—Ç—å –æ –Ω–æ–≤—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö")
    history_btn = types.KeyboardButton("üóÇ –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")
    back_btn = types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
    markup.add(new_events_btn, history_btn, back_btn)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–º–µ–Ω—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
@bot.message_handler(
    func=lambda m: m.text in ["‚ùì –£–∑–Ω–∞—Ç—å –æ –Ω–æ–≤—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö", "üóÇ –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"])
def handle_events_submenu(message):
    chat_id = message.chat.id

    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        send_main_menu(chat_id)
        return

    conn = getDBConnection()
    cursor = conn.cursor()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        cursor.execute("SELECT id, role FROM users WHERE telegram_id = ?", (chat_id,))
        user = cursor.fetchone()
        if not user:
            bot.send_message(chat_id, "‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
            return

        user_id = user["id"]
        user_role = user["role"]
        now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

        if message.text == "‚ùì –£–∑–Ω–∞—Ç—å –æ –Ω–æ–≤—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—É–¥—É—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è
            cursor.execute("""
                SELECT e.id, e.title, e.datetime, e.description, e.target_roles,
                       CASE WHEN ep.user_id IS NOT NULL THEN 1 ELSE 0 END as is_registered
                FROM events e
                LEFT JOIN event_participants ep ON e.id = ep.event_id AND ep.user_id = ?
                WHERE (e.target_roles IN ('both', ?)) 
                  AND e.datetime > ?
                ORDER BY e.datetime ASC
            """, (user_id, user_role, now))

            events = cursor.fetchall()

            if not events:
                bot.send_message(chat_id, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
                return

            for event in events:
                markup = types.InlineKeyboardMarkup()

                if event['is_registered']:
                    cancel_button = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å",
                                                               callback_data=f"leave_{event['id']}")
                    markup.add(cancel_button)
                    status_text = "‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã"
                else:
                    join_button = types.InlineKeyboardButton("üîó –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"join_{event['id']}")
                    markup.add(join_button)
                    status_text = ""

                event_text = f"üéâ <b>{event['title']}</b>\n"
                event_text += f"üìÖ –î–∞—Ç–∞: {event['datetime']}\n"
                event_text += f"üìç {event['description']}\n"
                if status_text:
                    event_text += f"\n{status_text}\n"

                bot.send_message(
                    chat_id,
                    event_text,
                    parse_mode="HTML",
                    reply_markup=markup
                )

        elif message.text == "üóÇ –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–∏—Å—ã–≤–∞–ª—Å—è
            cursor.execute("""
                SELECT e.id, e.title, e.datetime, e.description,
                       CASE WHEN e.datetime < ? THEN 1 ELSE 0 END as is_past
                FROM events e
                JOIN event_participants ep ON e.id = ep.event_id
                WHERE ep.user_id = ?
                ORDER BY e.datetime DESC
            """, (now, user_id))

            events = cursor.fetchall()

            if not events:
                bot.send_message(chat_id, "–í—ã –µ—â–µ –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–ª–∏—Å—å –Ω–∏ –Ω–∞ –æ–¥–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.")
                return

            for event in events:
                event_text = f"üé´ <b>{event['title']}</b>\n"
                event_text += f"üìÖ –î–∞—Ç–∞: {event['datetime']}\n"
                event_text += f"üìç {event['description']}\n"

                if event['is_past']:
                    event_text += "\nüîπ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–∂–µ –ø—Ä–æ—à–ª–æ\n"
                else:
                    markup = types.InlineKeyboardMarkup()
                    cancel_button = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å",
                                                               callback_data=f"leave_{event['id']}")
                    markup.add(cancel_button)
                    event_text += "\nüîπ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã\n"
                    bot.send_message(
                        chat_id,
                        event_text,
                        parse_mode="HTML",
                        reply_markup=markup
                    )
                    continue

                bot.send_message(
                    chat_id,
                    event_text,
                    parse_mode="HTML"
                )

    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {str(e)}")
    finally:
        conn.close()


@bot.message_handler(func=lambda m: m.text == "üìÖ –ß–∏—Å–ª–∏—Ç–µ–ª—å/–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å?")
def week(message):
    numberWeek = datetime.now().isocalendar().week
    if (numberWeek % 2 == 0):
        bot.send_message(message.chat.id, "üìÜ –°–µ–π—á–∞—Å —á–∏—Å–ª–∏—Ç–µ–ª—å.", parse_mode="HTML", )
    else:
        bot.send_message(message.chat.id, "üìÜ –°–µ–π—á–∞—Å –∑–Ω–∞–º–∏–Ω–∞—Ç–µ–ª—å.", parse_mode="HTML", )


@bot.callback_query_handler(func=lambda call: call.data.startswith('join_'))
def join_event(call):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    event_id = int(call.data.split('_')[1])

    try:
        conn = getDBConnection()
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        cursor.execute("SELECT * FROM events WHERE id = ?", (event_id,))
        event = cursor.fetchone()
        if not event:
            bot.answer_callback_query(call.id, "–≠—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT id FROM users WHERE telegram_id = ?", (chat_id,))
        user = cursor.fetchone()
        if not user:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        user_id = user["id"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute("SELECT * FROM event_participants WHERE event_id = ? AND user_id = ?", (event_id, user_id))
        if cursor.fetchone():
            bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!")
            return

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("INSERT INTO event_participants (event_id, user_id, status) VALUES (?, ?, 'going')",
                       (event_id, user_id))
        conn.commit()

        bot.clear_step_handler_by_chat_id(chat_id)
        bot.delete_message(chat_id, message_id)

        bot.send_message(chat_id, f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event['title']}!")
        handle_events_submenu(call.message)

    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        conn.close()



@bot.callback_query_handler(func=lambda call: call.data.startswith('leave_'))
def leave_event(call):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    event_id = int(call.data.split('_')[1])

    try:
        conn = getDBConnection()
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        cursor.execute("SELECT * FROM events WHERE id = ?", (event_id,))
        event = cursor.fetchone()
        if not event:
            bot.answer_callback_query(call.id, "–≠—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT id FROM users WHERE telegram_id = ?", (chat_id,))
        user = cursor.fetchone()
        if not user:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        user_id = user["id"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute("SELECT * FROM event_participants WHERE event_id = ? AND user_id = ?", (event_id, user_id))
        if not cursor.fetchone():
            bot.answer_callback_query(call.id, "–í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!")
            return

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
        cursor.execute("DELETE FROM event_participants WHERE event_id = ? AND user_id = ?", (event_id, user_id))
        conn.commit()

        bot.clear_step_handler_by_chat_id(chat_id)
        bot.delete_message(chat_id, message_id)

        bot.send_message(chat_id, f"‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event['title']}!")
        handle_events_submenu(call.message)

    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        conn.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–∫–ª—é—á–∏—Ç—å/–í—ã–∫–ª—é—á–∏—Ç—å —Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º"
@bot.message_handler(func=lambda m: m.text == "üîï –í–∫–ª—é—á–∏—Ç—å" or m.text == "üîî –í—ã–∫–ª—é—á–∏—Ç—å")
def toggle_silent_mode(message):
    chat_id = message.chat.id
    conn = getDBConnection()
    cursor = conn.cursor()

    cursor.execute("SELECT silent_mode FROM users WHERE telegram_id = ?", (chat_id,))
    user = cursor.fetchone()

    if user:
        new_silent_mode = 0 if user['silent_mode'] else 1
        cursor.execute("UPDATE users SET silent_mode = ? WHERE telegram_id = ?", (new_silent_mode, chat_id))
        conn.commit()
        conn.close()

        new_silent_text = "üîï –í–∫–ª—é—á–∏—Ç—å" if new_silent_mode == 0 else "üîî –í—ã–∫–ª—é—á–∏—Ç—å"
        send_main_menu(chat_id)
        bot.send_message(chat_id, f"üîä –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º {'–≤—ã–∫–ª—é—á–µ–Ω' if new_silent_mode == 0 else '–≤–∫–ª—é—á–µ–Ω'}.")
    else:
        bot.send_message(chat_id, "‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
        conn.close()


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
start_notifications()
bot.infinity_polling()
# –ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
stop_notifications()
import telebot
import sqlite3
import os
from telebot import types
from datetime import datetime, timedelta
from Utils.Utils import verifyPassword

dbDir = "C:/Users/alexa/Desktop/KSU-Assistant-after-venv/Utils"
DATABASE_PATH = os.path.join(dbDir, "university.db")
botToken = '7637461107:AAFH6C5oy9WZIuQhZfkmH6YUbVNseduRA90'
bot = telebot.TeleBot(botToken)
user_states = {}


def getDBConnection():
    conn = sqlite3.connect(DATABASE_PATH)
    conn.row_factory = sqlite3.Row
    return conn


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def send_main_menu(chat_id):
    conn = getDBConnection()
    cursor = conn.cursor()
    cursor.execute("SELECT silent_mode FROM users WHERE telegram_id = ?", (chat_id,))
    user = cursor.fetchone()
    conn.close()

    silent_mode = user['silent_mode'] if user else 0
    silent_text = "üîï –í–∫–ª—é—á–∏—Ç—å" if not silent_mode else "üîî –í—ã–∫–ª—é—á–∏—Ç—å"

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    schedule_btn = types.KeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    events_btn = types.KeyboardButton("üìã –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
    silent_btn = types.KeyboardButton(silent_text)
    markup.add(schedule_btn, events_btn, silent_btn)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


# /start
@bot.message_handler(commands=['start'])
def handleStart(message):
    chat_id = message.chat.id
    user_states.pop(chat_id, None)

    conn = getDBConnection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE telegram_id = ?', (chat_id,))
    user = cursor.fetchone()
    conn.close()

    if user:
        send_main_menu(chat_id)
        bot.send_message(chat_id, "–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
    else:
        markup = types.InlineKeyboardMarkup()
        login_button = types.InlineKeyboardButton(text="üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", callback_data="start_login")
        markup.add(login_button)
        bot.send_message(
            chat_id,
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ KSU.\n\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Å—è.",
            reply_markup=markup
        )


@bot.callback_query_handler(func=lambda call: call.data == "start_login")
def start_login_callback(call):
    chat_id = call.message.chat.id
    bot.answer_callback_query(call.id)
    bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–æ—á—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, @studklg.ru –∏–ª–∏ @tksu.ru):')
    user_states[chat_id] = {'state': 'WAIT_EMAIL'}


@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get('state') == 'WAIT_EMAIL')
def handle_email(message):
    chat_id = message.chat.id
    email = message.text.strip()

    if not (email.endswith('@studklg.ru') or email.endswith('@tksu.ru')):
        bot.send_message(chat_id, '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –¥–æ–º–µ–Ω –ø–æ—á—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @studklg.ru –∏–ª–∏ @tksu.ru.')
        return

    conn = getDBConnection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE email = ?', (email,))
    user = cursor.fetchone()
    conn.close()

    if not user:
        bot.send_message(chat_id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–æ–π –ø–æ—á—Ç–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        return

    if user['telegram_id'] is not None:
        if str(user['telegram_id']) == str(chat_id):
            bot.send_message(chat_id, '–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.')
        else:
            bot.send_message(chat_id, '–≠—Ç–æ—Ç email —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.')
        user_states.pop(chat_id, None)
        return

    user_states[chat_id] = {'state': 'WAIT_PASSWORD', 'email': email}
    bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:')


@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get('state') == 'WAIT_PASSWORD')
def handle_password(message):
    chat_id = message.chat.id
    password = message.text.strip()
    email = user_states[chat_id]['email']

    conn = getDBConnection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE email = ?', (email,))
    user = cursor.fetchone()

    if not user or not verifyPassword(user['password_hash'], password):
        bot.send_message(chat_id, '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ /start')
        conn.close()
        user_states.pop(chat_id, None)
        return

    cursor.execute('UPDATE users SET telegram_id = ? WHERE email = ?', (chat_id, email))
    conn.commit()
    conn.close()

    bot.send_message(chat_id, f'‚úÖ –£—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ {user["role"]}.')
    user_states.pop(chat_id, None)
    send_main_menu(chat_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@bot.message_handler(func=lambda m: m.text in ["üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "üìÜ –°–µ–≥–æ–¥–Ω—è", "üóìÔ∏è –ù–∞ –Ω–µ–¥–µ–ª—é", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"])
def handle_schedule(message):
    chat_id = message.chat.id

    if message.text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        today_btn = types.KeyboardButton("üìÜ –°–µ–≥–æ–¥–Ω—è")
        week_btn = types.KeyboardButton("üóìÔ∏è –ù–∞ –Ω–µ–¥–µ–ª—é")
        back_btn = types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
        markup.add(today_btn, week_btn, back_btn)
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=markup)
        return

    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        send_main_menu(chat_id)
        return

    mode = 'today' if message.text == "üìÜ –°–µ–≥–æ–¥–Ω—è" else 'week'

    conn = getDBConnection()
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT id, role FROM users WHERE telegram_id = ?", (chat_id,))
        user = cursor.fetchone()

        if not user:
            bot.send_message(chat_id, "‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
            return

        user_id = user["id"]
        user_role = user["role"]

        if user_role == 'student':
            schedule_text = fetch_student_schedule(user_id, mode)
        elif user_role == 'teacher':
            schedule_text = fetch_teacher_schedule(user_id, mode)
        else:
            schedule_text = "‚ùå –í–∞—à–∞ —Ä–æ–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."

        bot.send_message(chat_id, schedule_text, parse_mode="HTML")

    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}")
    finally:
        conn.close()


def fetch_student_schedule(user_id, mode='today'):
    conn = getDBConnection()
    cursor = conn.cursor()

    cursor.execute("SELECT group_id FROM students WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    if not row:
        conn.close()
        return "‚ùå –í—ã –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É."

    group_id = row["group_id"]
    today = datetime.today()
    weekday = today.weekday()
    today_str = today.strftime('%Y-%m-%d')

    if mode == 'today':
        cursor.execute(""" 
            SELECT lessons.weekday, lessons.pair_number, pair_times.start_time, pair_times.end_time,
                   subjects.name AS subject_name, rooms.room_number, rooms.building,
                   teachers.full_name AS teacher_name
            FROM lessons
            JOIN pair_times ON lessons.pair_number = pair_times.pair_number
            JOIN subjects ON lessons.subject_id = subjects.id
            JOIN rooms ON lessons.room_id = rooms.id
            JOIN teachers ON lessons.teacher_id = teachers.user_id
            WHERE lessons.group_id = ? AND lessons.weekday = ?
              AND date(?) BETWEEN date(lessons.start_date) AND date(lessons.end_date)
            ORDER BY lessons.pair_number
        """, (group_id, weekday, today_str))
    else:
        week_dates = [(today + timedelta(days=i)).strftime('%Y-%m-%d') for i in range(7)]
        weekday_range = tuple(i for i in range(7))
        cursor.execute(f"""
            SELECT lessons.weekday, lessons.pair_number, pair_times.start_time, pair_times.end_time,
                   subjects.name AS subject_name, rooms.room_number, rooms.building,
                   teachers.full_name AS teacher_name
            FROM lessons
            JOIN pair_times ON lessons.pair_number = pair_times.pair_number
            JOIN subjects ON lessons.subject_id = subjects.id
            JOIN rooms ON lessons.room_id = rooms.id
            JOIN teachers ON lessons.teacher_id = teachers.user_id
            WHERE lessons.group_id = ?
              AND lessons.weekday IN ({','.join(['?'] * len(weekday_range))})
              AND date(?) BETWEEN date(lessons.start_date) AND date(lessons.end_date)
            ORDER BY lessons.weekday, lessons.pair_number
        """, (group_id, *weekday_range, today_str))

    lessons = cursor.fetchall()
    conn.close()

    if not lessons:
        return "üìù –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
    msg = ""
    last_day = -1
    for lesson in lessons:
        day = lesson['weekday']
        if mode == 'week' and day != last_day:
            msg += f"\nüìÖ <b>{days[day]}</b>\n"
            last_day = day
        msg += f"‚è∞ {lesson['start_time']}‚Äì{lesson['end_time']}: <b>{lesson['subject_name']}</b>\n"
        msg += f"   üë®‚Äçüè´ {lesson['teacher_name']}\n"
        msg += f"   üìç –ê—É–¥. {lesson['room_number']} ({lesson['building']})\n"
    return msg


def fetch_teacher_schedule(user_id, mode='today'):
    conn = getDBConnection()
    cursor = conn.cursor()

    today = datetime.today()
    weekday = today.weekday()
    today_str = today.strftime('%Y-%m-%d')

    if mode == 'today':
        cursor.execute(""" 
            SELECT lessons.weekday, lessons.pair_number, pair_times.start_time, pair_times.end_time,
                   subjects.name AS subject_name, rooms.room_number, rooms.building,
                   academic_groups.name AS group_name
            FROM lessons
            JOIN pair_times ON lessons.pair_number = pair_times.pair_number
            JOIN subjects ON lessons.subject_id = subjects.id
            JOIN rooms ON lessons.room_id = rooms.id
            JOIN academic_groups ON lessons.group_id = academic_groups.id
            WHERE lessons.teacher_id = ? AND lessons.weekday = ?
              AND date(?) BETWEEN date(lessons.start_date) AND date(lessons.end_date)
            ORDER BY lessons.pair_number
        """, (user_id, weekday, today_str))
    else:
        week_dates = [(today + timedelta(days=i)).strftime('%Y-%m-%d') for i in range(7)]
        weekday_range = tuple(i for i in range(7))
        cursor.execute(f"""
            SELECT lessons.weekday, lessons.pair_number, pair_times.start_time, pair_times.end_time,
                   subjects.name AS subject_name, rooms.room_number, rooms.building,
                   academic_groups.name AS group_name
            FROM lessons
            JOIN pair_times ON lessons.pair_number = pair_times.pair_number
            JOIN subjects ON lessons.subject_id = subjects.id
            JOIN rooms ON lessons.room_id = rooms.id
            JOIN academic_groups ON lessons.group_id = academic_groups.id
            WHERE lessons.teacher_id = ?
              AND lessons.weekday IN ({','.join(['?'] * len(weekday_range))})
              AND date(?) BETWEEN date(lessons.start_date) AND date(lessons.end_date)
            ORDER BY lessons.weekday, lessons.pair_number
        """, (user_id, *weekday_range, today_str))

    lessons = cursor.fetchall()
    conn.close()

    if not lessons:
        return "üìù –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
    msg = ""
    last_day = -1
    for lesson in lessons:
        day = lesson['weekday']
        if mode == 'week' and day != last_day:
            msg += f"\nüìÖ <b>{days[day]}</b>\n"
            last_day = day
        msg += f"‚è∞ {lesson['start_time']}‚Äì{lesson['end_time']}: <b>{lesson['subject_name']}</b>\n"
        msg += f"   üë• –ì—Ä—É–ø–ø–∞: {lesson['group_name']}\n"
        msg += f"   üìç –ê—É–¥. {lesson['room_number']} ({lesson['building']})\n"
    return msg


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìã –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
@bot.message_handler(func=lambda m: m.text == "üìã –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
def handle_events(message):
    conn = getDBConnection()
    cursor = conn.cursor()

    cursor.execute("SELECT role FROM users WHERE telegram_id = ?", (message.chat.id,))
    user = cursor.fetchone()
    if not user:
        bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
        return

    user_role = user['role']

    cursor.execute("""
        SELECT events.id, events.title, events.datetime, events.description, events.target_roles
        FROM events
        WHERE events.target_roles IN ('both', ?) OR (events.target_roles = 'both' AND events.group_id IS NULL)
        ORDER BY events.datetime ASC
    """, (user_role,))

    events = cursor.fetchall()
    conn.close()

    if not events:
        bot.send_message(message.chat.id, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
        return

    for event in events:
        markup = types.InlineKeyboardMarkup()
        conn = getDBConnection()
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM event_participants WHERE event_id = ? AND user_id = ?",
                       (event['id'], message.chat.id))
        existing_registration = cursor.fetchone()

        if existing_registration:
            cancel_button = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"leave_{event['id']}")
            markup.add(cancel_button)
        else:
            join_button = types.InlineKeyboardButton("üîó –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"join_{event['id']}")
            markup.add(join_button)

        event_text = f"üéâ <b>{event['title']}</b>\n"
        event_text += f"üìÖ –î–∞—Ç–∞: {event['datetime']}\n"
        event_text += f"üìç {event['description']}\n"

        bot.send_message(
            message.chat.id,
            event_text,
            parse_mode="HTML",
            reply_markup=markup
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
@bot.callback_query_handler(func=lambda call: call.data.startswith('join_'))
def join_event(call):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    event_id = int(call.data.split('_')[1])

    try:
        conn = getDBConnection()
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        cursor.execute("SELECT * FROM events WHERE id = ?", (event_id,))
        event = cursor.fetchone()

        if not event:
            bot.answer_callback_query(call.id, "–≠—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute("SELECT * FROM event_participants WHERE event_id = ? AND user_id = ?",
                       (event_id, chat_id))
        if cursor.fetchone():
            bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!")
            return

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("INSERT INTO event_participants (event_id, user_id, status) VALUES (?, ?, 'going')",
                       (event_id, chat_id))
        conn.commit()

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏
        bot.clear_step_handler_by_chat_id(chat_id)
        bot.delete_message(chat_id, message_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        bot.send_message(chat_id, f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event['title']}!")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        handle_events(call.message)

    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        conn.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith('leave_'))
def leave_event(call):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    event_id = int(call.data.split('_')[1])

    try:
        conn = getDBConnection()
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        cursor.execute("SELECT * FROM events WHERE id = ?", (event_id,))
        event = cursor.fetchone()

        if not event:
            bot.answer_callback_query(call.id, "–≠—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute("SELECT * FROM event_participants WHERE event_id = ? AND user_id = ?",
                       (event_id, chat_id))
        if not cursor.fetchone():
            bot.answer_callback_query(call.id, "–í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!")
            return

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
        cursor.execute("DELETE FROM event_participants WHERE event_id = ? AND user_id = ?",
                       (event_id, chat_id))
        conn.commit()

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏
        bot.clear_step_handler_by_chat_id(chat_id)
        bot.delete_message(chat_id, message_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        bot.send_message(chat_id, f"‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event['title']}!")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        handle_events(call.message)

    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        conn.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–∫–ª—é—á–∏—Ç—å/–í—ã–∫–ª—é—á–∏—Ç—å —Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º"
@bot.message_handler(func=lambda m: m.text == "üîï –í–∫–ª—é—á–∏—Ç—å" or m.text == "üîî –í—ã–∫–ª—é—á–∏—Ç—å")
def toggle_silent_mode(message):
    chat_id = message.chat.id
    conn = getDBConnection()
    cursor = conn.cursor()

    cursor.execute("SELECT silent_mode FROM users WHERE telegram_id = ?", (chat_id,))
    user = cursor.fetchone()

    if user:
        new_silent_mode = 0 if user['silent_mode'] else 1
        cursor.execute("UPDATE users SET silent_mode = ? WHERE telegram_id = ?", (new_silent_mode, chat_id))
        conn.commit()
        conn.close()

        new_silent_text = "üîï –í–∫–ª—é—á–∏—Ç—å" if new_silent_mode == 0 else "üîî –í—ã–∫–ª—é—á–∏—Ç—å"
        send_main_menu(chat_id)
        bot.send_message(chat_id, f"üîä –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º {'–≤—ã–∫–ª—é—á–µ–Ω' if new_silent_mode == 0 else '–≤–∫–ª—é—á–µ–Ω'}.")
    else:
        bot.send_message(chat_id, "‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
        conn.close()


bot.infinity_polling()
